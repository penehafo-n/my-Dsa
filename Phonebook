import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class ModernPhonebookApp extends JFrame {
    private DefaultListModel<Contact> contactListModel;
    private JList<Contact> contactJList;
    private JTextField searchField;
    private JButton deleteButton, insertButton, updateButton;
    private ArrayList<Contact> contactTable; // Dynamically resizing list for contacts
    private JPanel actionButtonPanel;

    public ModernPhonebookApp() {
        // Initialize the contact list
        contactTable = new ArrayList<>();

        // Frame setup
        setTitle("Modern Phonebook");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        getContentPane().setBackground(new Color(240, 240, 240)); // Light Gray

        // Search panel
        JPanel searchPanel = new JPanel(new BorderLayout());
        searchPanel.setBackground(new Color(240, 240, 240)); // Light Gray
        searchPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        searchPanel.add(new JLabel("Search:"), BorderLayout.WEST);
        searchField = new JTextField();
        searchPanel.add(searchField, BorderLayout.CENTER);
        add(searchPanel, BorderLayout.NORTH);

        // Contact list model and list component
        contactListModel = new DefaultListModel<>();
        contactJList = new JList<>(contactListModel);
        contactJList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        contactJList.setBackground(Color.WHITE); // Soft White
        contactJList.setForeground(new Color(51, 51, 51)); // Dark Gray
        JScrollPane listScrollPane = new JScrollPane(contactJList);
        add(listScrollPane, BorderLayout.CENTER);

        // Action buttons panel
        actionButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        deleteButton = new JButton("Delete");
        deleteButton.setEnabled(false);
        deleteButton.setBackground(new Color(244, 67, 54)); // Bright Red
        deleteButton.setForeground(Color.WHITE);
        actionButtonPanel.add(deleteButton);

        insertButton = new JButton("Insert");
        insertButton.setBackground(new Color(0, 86, 179)); // Deep Blue
        insertButton.setForeground(Color.WHITE);
        actionButtonPanel.add(insertButton);

        updateButton = new JButton("Update");
        updateButton.setEnabled(false); // Disable update button when no contact is selected
        updateButton.setBackground(new Color(0, 86, 179)); // Deep Blue
        updateButton.setForeground(Color.WHITE);
        actionButtonPanel.add(updateButton);

        // Add actionButtonPanel to the bottom of the frame
        add(actionButtonPanel, BorderLayout.SOUTH);

        // Event listeners
        contactJList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                Contact selectedContact = contactJList.getSelectedValue();
                boolean isSelected = selectedContact != null;
                deleteButton.setEnabled(isSelected);
                updateButton.setEnabled(isSelected);
            }
        });

        contactJList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    Contact selectedContact = contactJList.getSelectedValue();
                    if (selectedContact != null) {
                        showContactDetails(selectedContact);
                    }
                }
            }
        });

        searchField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                searchContacts(searchField.getText());
            }
        });

        deleteButton.addActionListener(e -> deleteContacts());
        insertButton.addActionListener(e -> insertNewContact());
        updateButton.addActionListener(e -> updateSelectedContacts());

        // Load contacts from a data source to avoid duplicates on each run
        loadContacts();
    }

    private void loadContacts() {
    }

    // Insert a new contact
// Insert a new contact
    private void insertContact(String name, String surname, String phone, String email, String address) {
        // Remove spaces from phone number
        phone = phone.replaceAll("\\s+", "");

        // Check if name or phone is blank
        if (name.isEmpty() || phone.isEmpty()) {
            showError("Please enter a name and number.");
            return;
        }

        // Validate that the phone number contains only digits, allowing an optional plus sign at the start
        if (!phone.matches("\\+?\\d+?")) {
            showError("Invalid Entry");
            return;
        }

        if (!phoneExists(phone)) {
            Contact newContact = new Contact(name, surname, phone, email, address);
            contactTable.add(newContact); // Add contact to the list
            updateContactListModel(); // Refresh contact list
        } else {
            showError("This phone number already exists.");
        }
    }

    // Check if the phone number already exists
    private boolean phoneExists(String phone) {
        return contactTable.stream().anyMatch(contact -> contact.getPhone().equals(phone));
    }

    // Insert a new contact via dialog
    private void insertNewContact() {
        while (true) { // Loop to allow multiple entries
            JTextField nameField = new JTextField();
            JTextField surnameField = new JTextField();
            JTextField phoneField = new JTextField();
            JTextField emailField = new JTextField();
            JTextField addressField = new JTextField();

            Object[] message = {
                    "First Name:", nameField,
                    "Surname:", surnameField,
                    "Phone Number:", phoneField,
                    "Email:", emailField,
                    "Address:", addressField
            };

            int option = JOptionPane.showConfirmDialog(this, message, "Insert New Contact", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                insertContact(nameField.getText(), surnameField.getText(), phoneField.getText(), emailField.getText(), addressField.getText());
            } else {
                break; // Exit loop if user cancels
            }
        }
    }

    // Update the selected contacts via dialog
    private void updateSelectedContacts() {
        Contact[] selectedContacts = contactJList.getSelectedValuesList().toArray(new Contact[0]);
        for (Contact selectedContact : selectedContacts) {
            JTextField nameField = new JTextField(selectedContact.getFirstName());
            JTextField surnameField = new JTextField(selectedContact.getSurname());
            JTextField phoneField = new JTextField(selectedContact.getPhone());
            JTextField emailField = new JTextField(selectedContact.getEmail());
            JTextField addressField = new JTextField(selectedContact.getAddress());

            Object[] message = {
                    "First Name:", nameField,
                    "Surname:", surnameField,
                    "Phone Number:", phoneField,
                    "Email:", emailField,
                    "Address:", addressField
            };

            int option = JOptionPane.showConfirmDialog(this, message, "Update Contact", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                String newName = nameField.getText();
                String newPhone = phoneField.getText().replaceAll("\\s+", "");

                // Check if name or phone is blank
                if (newName.isEmpty() || newPhone.isEmpty()) {
                    showError("Please enter a contact.");
                    return;
                }

                // Validate that the new phone number contains only digits or starts with a plus sign
                if (!newPhone.matches("\\+?\\d+")) {
                    showError("Invalid Entry.");
                    return;
                }

                if (!phoneExists(newPhone) || newPhone.equals(selectedContact.getPhone())) {
                    // Update contact information
                    selectedContact.setFirstName(newName);
                    selectedContact.setSurname(surnameField.getText());
                    selectedContact.setPhone(newPhone);
                    selectedContact.setEmail(emailField.getText());
                    selectedContact.setAddress(addressField.getText());
                } else {
                    showError("This phone number already exists.");
                }
            }
        }
        updateContactListModel();
    }

    // Delete selected contacts
    private void deleteContacts() {
        Contact[] selectedContacts = contactJList.getSelectedValuesList().toArray(new Contact[0]);
        for (Contact selectedContact : selectedContacts) {
            contactTable.remove(selectedContact); // Remove from the list
        }
        updateContactListModel();
    }

    // Search contacts based on user input
    private void searchContacts(String searchText) {
        contactListModel.clear();
        for (Contact contact : contactTable) {
            if (contact.getFirstName().toLowerCase().contains(searchText.toLowerCase())
                    || contact.getSurname().toLowerCase().contains(searchText.toLowerCase())
                    || contact.getPhone().contains(searchText)) {
                contactListModel.addElement(contact);
            }
        }
    }

    // Refresh contact list model
    private void updateContactListModel() {
        contactListModel.clear();
        for (Contact contact : contactTable) {
            contactListModel.addElement(contact);
        }
    }

    // Display contact details
    private void showContactDetails(Contact contact) {
        JOptionPane.showMessageDialog(this,
                "Name: " + contact.getFirstName() + " " + contact.getSurname() + "\n" +
                        "Phone: " + contact.getPhone() + "\n" +
                        "Email: " + contact.getEmail() + "\n" +
                        "Address: " + contact.getAddress(),
                "Contact Details", JOptionPane.INFORMATION_MESSAGE);
    }

    // Display error message
    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
    

    // Main method to start the application
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new ModernPhonebookApp().setVisible(true));
    }
}

// Contact class to hold contact information
class Contact {
    private String firstName, surname, phone, email, address;

    public Contact(String firstName, String surname, String phone, String email, String address) {
        this.firstName = firstName;
        this.surname = surname;
        this.phone = phone;
        this.email = email;
        this.address = address;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public String toString() {
        return firstName + " " + surname ;
    }
}
