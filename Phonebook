import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.border.EmptyBorder;

public class ModernPhonebookApp extends JFrame {
    private DefaultListModel<Contact> contactListModel;
    private JList<Contact> contactJList;
    private JTextField searchField;
    private JTextArea contactDetailsArea;
    private JButton deleteButton, insertButton, updateButton;
    private LinkedList<Contact> contactList;

    // Maximum number of contacts allowed
    private static final int MAX_CONTACTS = 2000;

    public ModernPhonebookApp() {
        // Initialize the contact list
        contactList = new LinkedList<>();

        // Frame setup
        setTitle("Modern Phonebook");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Search panel
        JPanel searchPanel = new JPanel(new BorderLayout());
        searchPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        searchPanel.add(new JLabel("Search:"), BorderLayout.WEST);
        searchField = new JTextField();
        searchPanel.add(searchField, BorderLayout.CENTER);
        add(searchPanel, BorderLayout.NORTH);

        // Contact list model and list component
        contactListModel = new DefaultListModel<>();
        contactJList = new JList<>(contactListModel);
        contactJList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); // Allow multiple selection
        JScrollPane listScrollPane = new JScrollPane(contactJList);

        // Contact details area and buttons
        contactDetailsArea = new JTextArea(10, 30);
        contactDetailsArea.setEditable(false);
        contactDetailsArea.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane detailsScrollPane = new JScrollPane(contactDetailsArea);

        deleteButton = new JButton("Delete");
        deleteButton.setEnabled(false);
        deleteButton.setBackground(Color.RED);
        deleteButton.setForeground(Color.WHITE);

        insertButton = new JButton("Insert");
        updateButton = new JButton("Update");
        updateButton.setEnabled(false); // Disable update button when no contact is selected

        // Event listeners
        contactJList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                Contact selectedContact = contactJList.getSelectedValue();
                if (selectedContact != null) {
                    contactDetailsArea.setText(selectedContact.getFormattedDetails());
                    deleteButton.setEnabled(true);
                    updateButton.setEnabled(true);
                } else {
                    deleteButton.setEnabled(false);
                    updateButton.setEnabled(false);
                }
            }
        });

        searchField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                searchContacts(searchField.getText());
            }
        });

        deleteButton.addActionListener(e -> deleteSelectedContacts());
        insertButton.addActionListener(e -> openInsertContactDialog());
        updateButton.addActionListener(e -> updateSelectedContact());

        // Layout adjustments
        JPanel rightPanel = new JPanel(new BorderLayout());
        rightPanel.add(detailsScrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(insertButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        rightPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(listScrollPane, BorderLayout.CENTER);
        add(rightPanel, BorderLayout.EAST);

        // Populate with random contacts (now starting with 30 contacts)
        populateRandomContacts(30);
    }

    // Method to open a dialog for inserting a new contact
    private void openInsertContactDialog() {
        JDialog dialog = new JDialog(this, "Insert New Contact", true);
        dialog.setLayout(new GridLayout(4, 2));
        dialog.setSize(300, 200);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        // Create input fields for new contact
        JTextField nameField = new JTextField();
        JTextField surnameField = new JTextField();
        JTextField phoneField = new JTextField();

        // Add labels and fields to the dialog
        dialog.add(new JLabel("First Name:"));
        dialog.add(nameField);
        dialog.add(new JLabel("Surname:"));
        dialog.add(surnameField);
        dialog.add(new JLabel("Phone:"));
        dialog.add(phoneField);

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(e -> {
            String name = nameField.getText().trim();
            String surname = surnameField.getText().trim();
            String phone = phoneField.getText().trim();

            insertContact(name, surname, phone); // Insert the contact
            dialog.dispose(); // Close the dialog
        });

        dialog.add(saveButton);
        dialog.setVisible(true);
    }

    // Method to populate the list with random Namibian contacts
    private void populateRandomContacts(int count) {
        String[] firstNames = {
                "Etuwete", "Shaun", "Collen", "Juice", "Elsa", "Sergio", "Anna", "Martha", "Samuel",
                "Johannes", "Lukas", "Maria", "Katja", "Stefanus", "Petrus", "Selma", "Hendrick", "Elena",
                "Abel", "Josef", "Michael", "Paulus", "Erika", "David", "Elina", "Thomas", "Wilhelm"
        };

        String[] lastNames = {
                "Amadhila", "Moses", "Shikongo", "Amunyela", "Haitembu", "Ngatangue", "Uugwanga", "Kandjimi",
                "Nekongo", "Haidula", "Iiyambo", "Nghidinwa", "Nandago", "Angula", "Shiimi", "Ndapuka",
                "Mweshipange", "Shipanga", "Shilongo", "Shikongo", "Muinjo", "Amunjela", "Nambala"
        };

        // Generate the specified number of random contacts
        for (int i = 0; i < count && contactList.size() < MAX_CONTACTS; i++) {
            String name = firstNames[new Random().nextInt(firstNames.length)];
            String surname = lastNames[new Random().nextInt(lastNames.length)];
            String randomPhone = generateNamibianPhoneNumber();
            insertContact(name, surname, randomPhone);
        }
    }

    // Method to generate a random Namibian phone number
    private String generateNamibianPhoneNumber() {
        String[] prefixes = {"081", "085", "061"};
        String prefix = prefixes[new Random().nextInt(prefixes.length)];
        int randomNumber = 1000000 + new Random().nextInt(9000000); // Generate a 7-digit number
        return "+264 " + prefix + " " + randomNumber;
    }

    // Insert contact method with duplication check
    private void insertContact(String name, String surname, String phone) {
        if (contactList.size() < MAX_CONTACTS) {
            if (!name.isEmpty() && !surname.isEmpty() && !phone.isEmpty()) {
                // Check for duplication
                boolean exists = contactList.stream().anyMatch(contact -> contact.getPhone().equals(phone));
                if (!exists) {
                    Contact newContact = new Contact(name, surname, phone);
                    contactList.add(newContact);
                    sortContacts();
                    updateContactListModel();
                } else {
                    JOptionPane.showMessageDialog(this, "Contact with this phone number already exists.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Maximum contact limit reached.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Delete selected contacts method
    private void deleteSelectedContacts() {
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected contacts?",
                "Delete Confirmation", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            List<Contact> selectedContacts = contactJList.getSelectedValuesList();
            for (Contact contact : selectedContacts) {
                contactList.remove(contact);
            }
            updateContactListModel();
            contactDetailsArea.setText("");
            deleteButton.setEnabled(false);
            updateButton.setEnabled(false);
        }
    }

    // Update the selected contact
    private void updateSelectedContact() {
        Contact selectedContact = contactJList.getSelectedValue();
        if (selectedContact != null) {
            String newName = JOptionPane.showInputDialog(this, "Enter new first name:", selectedContact.getFirstName());
            String newSurname = JOptionPane.showInputDialog(this, "Enter new surname:", selectedContact.getSurname());
            String newPhone = JOptionPane.showInputDialog(this, "Enter new phone number:", selectedContact.getPhone());

            if (newName != null && newSurname != null && newPhone != null) {
                // Check if the new phone number already exists
                boolean exists = contactList.stream().anyMatch(contact -> contact.getPhone().equals(newPhone) && !contact.equals(selectedContact));
                if (!exists) {
                    selectedContact.setFirstName(newName);
                    selectedContact.setSurname(newSurname);
                    selectedContact.setPhone(newPhone);
                    sortContacts();
                    updateContactListModel();
                } else {
                    JOptionPane.showMessageDialog(this, "Contact with this phone number already exists.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    // Method to update the contact list model
    private void updateContactListModel() {
        contactListModel.clear();
        for (Contact contact : contactList) {
            contactListModel.addElement(contact);
        }
    }

    // Method to sort the contacts alphabetically
    private void sortContacts() {
        contactList.sort(Comparator.comparing(Contact::getFullName));
    }

    // Method to search contacts based on the search field
    private void searchContacts(String query) {
        contactListModel.clear();
        for (Contact contact : contactList) {
            if (contact.getFullName().toLowerCase().contains(query.toLowerCase())) {
                contactListModel.addElement(contact);
            }
        }
    }

    // Main method to run the application
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ModernPhonebookApp app = new ModernPhonebookApp();
            app.setVisible(true);
        });
    }
}

// Contact class for storing contact details
class Contact {
    private String firstName;
    private String surname;
    private String phone;

    public Contact(String firstName, String surname, String phone) {
        this.firstName = firstName;
        this.surname = surname;
        this.phone = phone;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getFullName() {
        return firstName + " " + surname;
    }

    public String getFormattedDetails() {
        return "Name: " + getFullName() + "\nPhone: " + phone;
    }

    @Override
    public String toString() {
        return getFullName(); // Display the full name in the JList
    }
}
