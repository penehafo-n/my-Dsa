import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Arrays;
import java.util.Comparator;

public class ModernPhonebookApp extends JFrame {
    private DefaultListModel<Contact> contactListModel;
    private JList<Contact> contactJList;
    private JTextField searchField;
    private JButton deleteButton, insertButton, updateButton, textButton, callButton, videoCallButton;
    private Contact[] contactTable; // Hash table for contacts
    private final int TABLE_SIZE = 2000; // Size of the hash table
    private int currentSize; // Number of contacts in the hash table
    private JPanel actionButtonPanel;

    public ModernPhonebookApp() {
        // Initialize the contact table
        contactTable = new Contact[TABLE_SIZE];
        currentSize = 0;

        // Frame setup
        setTitle("Modern Phonebook");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        getContentPane().setBackground(new Color(240, 240, 240)); // Light Gray

        // Search panel
        JPanel searchPanel = new JPanel(new BorderLayout());
        searchPanel.setBackground(new Color(240, 240, 240)); // Light Gray
        searchPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        searchPanel.add(new JLabel("Search:"), BorderLayout.WEST);
        searchField = new JTextField();
        searchPanel.add(searchField, BorderLayout.CENTER);
        add(searchPanel, BorderLayout.NORTH);

        // Contact list model and list component
        contactListModel = new DefaultListModel<>();
        contactJList = new JList<>(contactListModel);
        contactJList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        contactJList.setBackground(Color.WHITE); // Soft White
        contactJList.setForeground(new Color(51, 51, 51)); // Dark Gray
        JScrollPane listScrollPane = new JScrollPane(contactJList);
        add(listScrollPane, BorderLayout.CENTER);

        // Action buttons panel
        actionButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        deleteButton = new JButton("Delete");
        deleteButton.setEnabled(false);
        deleteButton.setBackground(new Color(244, 67, 54)); // Bright Red
        deleteButton.setForeground(Color.WHITE);
        actionButtonPanel.add(deleteButton);

        insertButton = new JButton("Insert");
        insertButton.setBackground(new Color(0, 86, 179)); // Deep Blue
        insertButton.setForeground(Color.WHITE);
        actionButtonPanel.add(insertButton);

        updateButton = new JButton("Update");
        updateButton.setEnabled(false); // Disable update button when no contact is selected
        updateButton.setBackground(new Color(0, 86, 179)); // Deep Blue
        updateButton.setForeground(Color.WHITE);
        actionButtonPanel.add(updateButton);

        // Initialize action buttons but don't add them to the panel yet
        textButton = new JButton("Text");
        textButton.setEnabled(false);
        textButton.setBackground(new Color(0, 128, 0)); // Green
        textButton.setForeground(Color.WHITE);
        actionButtonPanel.add(textButton);

        callButton = new JButton("Call");
        callButton.setEnabled(false);
        callButton.setBackground(new Color(0, 128, 255)); // Light Blue
        callButton.setForeground(Color.WHITE);
        actionButtonPanel.add(callButton);

        videoCallButton = new JButton("Video Call");
        videoCallButton.setEnabled(false);
        videoCallButton.setBackground(new Color(255, 165, 0)); // Orange
        videoCallButton.setForeground(Color.WHITE);
        actionButtonPanel.add(videoCallButton);

        // Add actionButtonPanel to the bottom of the frame
        add(actionButtonPanel, BorderLayout.SOUTH);

        // Event listeners
        contactJList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                Contact selectedContact = contactJList.getSelectedValue();
                boolean isSelected = selectedContact != null;
                deleteButton.setEnabled(isSelected);
                updateButton.setEnabled(isSelected);
                textButton.setEnabled(isSelected);
                callButton.setEnabled(isSelected);
                videoCallButton.setEnabled(isSelected);
            }
        });

        contactJList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    Contact selectedContact = contactJList.getSelectedValue();
                    if (selectedContact != null) {
                        showContactDetails(selectedContact);
                    }
                }
            }
        });

        searchField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                searchContacts(searchField.getText());
            }
        });

        deleteButton.addActionListener(e -> deleteContacts());
        insertButton.addActionListener(e -> insertNewContact());
        updateButton.addActionListener(e -> updateSelectedContacts());
        textButton.addActionListener(e -> performText());
        callButton.addActionListener(e -> performCall());
        videoCallButton.addActionListener(e -> performVideoCall());

        // Load contacts from a data source to avoid duplicates on each run
        loadContacts();
    }

    // Load contacts to avoid duplication
    private void loadContacts() {
        // You can implement loading logic from a file or database here.
        // For now, it will remain empty to avoid duplication.
    }

    // Hash function to compute index for the contact
    private int hashFunction(String key) {
        return Math.abs(key.hashCode()) % TABLE_SIZE;
    }

    // Insert a new contact
    private void insertContact(String name, String surname, String phone, String email, String address) {
        // Remove spaces from phone number
        phone = phone.replaceAll("\\s+", "");

        if (!phoneExists(phone)) {
            Contact newContact = new Contact(name, surname, phone, email, address);
            int index = hashFunction(phone);

            // Linear probing for collision resolution
            while (contactTable[index] != null) {
                index = (index + 1) % TABLE_SIZE; // Move to next index
            }

            contactTable[index] = newContact; // Insert contact
            currentSize++;
            updateContactListModel(); // Refresh contact list
        } else {
            showError("This phone number already exists.");
        }
    }

    // Check if the phone number already exists
    private boolean phoneExists(String phone) {
        int index = hashFunction(phone);
        while (contactTable[index] != null) {
            if (contactTable[index].getPhone().equals(phone)) {
                return true;
            }
            index = (index + 1) % TABLE_SIZE; // Move to next index
        }
        return false;
    }

    // Insert a new contact via dialog
    private void insertNewContact() {
        while (true) { // Loop to allow multiple entries
            JTextField nameField = new JTextField();
            JTextField surnameField = new JTextField();
            JTextField phoneField = new JTextField();
            JTextField emailField = new JTextField();
            JTextField addressField = new JTextField();

            Object[] message = {
                "First Name:", nameField,
                "Surname:", surnameField,
                "Phone Number:", phoneField,
                "Email:", emailField,
                "Address:", addressField
            };

            int option = JOptionPane.showConfirmDialog(this, message, "Insert New Contact", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                insertContact(nameField.getText(), surnameField.getText(), phoneField.getText(), emailField.getText(), addressField.getText());
            } else {
                break; // Exit loop if user cancels
            }
        }
    }

    // Update the selected contacts via dialog
    private void updateSelectedContacts() {
        Contact[] selectedContacts = contactJList.getSelectedValuesList().toArray(new Contact[0]);
        for (Contact selectedContact : selectedContacts) {
            JTextField nameField = new JTextField(selectedContact.getFirstName());
            JTextField surnameField = new JTextField(selectedContact.getSurname());
            JTextField phoneField = new JTextField(selectedContact.getPhone());
            JTextField emailField = new JTextField(selectedContact.getEmail());
            JTextField addressField = new JTextField(selectedContact.getAddress());

            Object[] message = {
                "First Name:", nameField,
                "Surname:", surnameField,
                "Phone Number:", phoneField,
                "Email:", emailField,
                "Address:", addressField
            };

            int option = JOptionPane.showConfirmDialog(this, message, "Update Contact", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                String newPhone = phoneField.getText().replaceAll("\\s+", ""); // Remove spaces
                if (!phoneExists(newPhone) || newPhone.equals(selectedContact.getPhone())) {
                    // Update contact information
                    selectedContact.setFirstName(nameField.getText());
                    selectedContact.setSurname(surnameField.getText());
                    selectedContact.setPhone(newPhone);
                    selectedContact.setEmail(emailField.getText());
                    selectedContact.setAddress(addressField.getText());
                } else {
                    showError("This phone number already exists.");
                }
            }
        }
        updateContactListModel();
    }

    // Delete selected contacts
    private void deleteContacts() {
        Contact[] selectedContacts = contactJList.getSelectedValuesList().toArray(new Contact[0]);
        for (Contact selectedContact : selectedContacts) {
            deleteContact(selectedContact);
        }
        updateContactListModel();
    }

    // Delete contact from the hash table
    private void deleteContact(Contact contact) {
        int index = hashFunction(contact.getPhone());
        while (contactTable[index] != null) {
            if (contactTable[index].equals(contact)) {
                contactTable[index] = null; // Mark as deleted
                currentSize--;
                break;
            }
            index = (index + 1) % TABLE_SIZE; // Move to next index
        }
    }

    // Search contacts based on user input
    private void searchContacts(String searchText) {
        contactListModel.clear();
        for (Contact contact : contactTable) {
            if (contact != null && (contact.getFirstName().toLowerCase().contains(searchText.toLowerCase()) || 
                                    contact.getSurname().toLowerCase().contains(searchText.toLowerCase()) || 
                                    contact.getPhone().contains(searchText))) {
                contactListModel.addElement(contact);
            }
        }
    }

    // Update the contact list model based on the hash table
    private void updateContactListModel() {
        contactListModel.clear();
        for (Contact contact : contactTable) {
            if (contact != null) {
                contactListModel.addElement(contact);
            }
        }
    }

    // Show contact details in a dialog
    private void showContactDetails(Contact contact) {
        JOptionPane.showMessageDialog(this,
                "Contact Details:\n" +
                        "First Name: " + contact.getFirstName() + "\n" +
                        "Surname: " + contact.getSurname() + "\n" +
                        "Phone: " + contact.getPhone() + "\n" +
                        "Email: " + contact.getEmail() + "\n" +
                        "Address: " + contact.getAddress(),
                "Contact Details",
                JOptionPane.INFORMATION_MESSAGE);
    }

    // Show error messages
    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Placeholder methods for action buttons
    private void performText() {
        JOptionPane.showMessageDialog(this, "Text action performed.");
    }

    private void performCall() {
        JOptionPane.showMessageDialog(this, "Call action performed.");
    }

    private void performVideoCall() {
        JOptionPane.showMessageDialog(this, "Video Call action performed.");
    }

    // Main method to run the application
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ModernPhonebookApp app = new ModernPhonebookApp();
            app.setVisible(true);
        });
    }
}

// Contact class remains unchanged
class Contact {
    private String firstName;
    private String surname;
    private String phone;
    private String email;
    private String address;

    public Contact(String firstName, String surname, String phone, String email, String address) {
        this.firstName = firstName;
        this.surname = surname;
        this.phone = phone;
        this.email = email;
        this.address = address;
    }

    // Getters and Setters
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    public String getSurname() { return surname; }
    public void setSurname(String surname) { this.surname = surname; }
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    @Override
    public String toString() {
        return firstName + " " + surname;
    }
}
